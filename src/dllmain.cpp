
#include <MinHook.h>
#include "..\imgui\imgui.h"
#include "..\imgui\imgui_impl_win32.h"
#include "..\imgui\imgui_impl_opengl2.h"

// in opengl we need to hook the wglSwapBuffers to create our imgui menu

// we start of by creating a point that matches wglSwapBuffers signiture 
typedef BOOL(WINAPI* wglSwapBuffers_t)(HDC hdc);

// this will store the original wglSwapBuffers function adress so we can come back at it later to not crash the game 
wglSwapBuffers_t oWglSwapBuffers = nullptr;

// this is a handle to window we need this so the imgui knows where to "create the window"
HWND g_hWnd = nullptr;

//this is a flag to see if imgui is initialized 
bool g_ImGuiInitialized = false;


BOOL WINAPI hkWglSwapBuffers(HDC hdc)
{
    // this checks if imgui is initialized if not it runs the code we have this to avoid making many windows
    if (g_ImGuiInitialized == false)
    {
        // now we are passing in the value made before the window handle so now imgui knows where to create the window
        g_hWnd = WindowFromDC(hdc);
        // this checks if we failed to get the window handle
        if (!g_hWnd)
            //and if we did it instantly runs the original code to avoid crashes
            return oWglSwapBuffers(hdc);

        // this initialazes the stuff of imgui like fonts, settings, draw data, input handling, etc
        ImGui::CreateContext();
        //holds data and allows us to do stuff like io.MouseDrawCursor = true; etc 
        ImGuiIO& io = ImGui::GetIO();
        //tells the compiler that we know this is unused so it doesnt error on build 
        (void)io;
        // Initialize Win32 backend
        ImGui_ImplWin32_Init(g_hWnd);
        // Initialize OpenGL2 backend
        ImGui_ImplOpenGL2_Init();
        // Set flag so we dont initialize again
        g_ImGuiInitialized = true;
    }

    // Every frame update ImGui frame and render UI

    // this uses opengl2 to create a new frame for imguis rendering
    ImGui_ImplOpenGL2_NewFrame();
    //updates ImGuis internal input every frame so your UI can respond to mouse/keyboard properly
    ImGui_ImplWin32_NewFrame();
    //new  imgui frame to build ur UI it must be called before adding stuff like buttons, texts etc
    ImGui::NewFrame();

    // this is the imguis window name 
    ImGui::Begin("AssaultCube Hack");
    // we create a text for a example
    ImGui::Text("Hello from ImGui!");
    // this is a must sience we have a ImGui::Begin it must end samwhere
    ImGui::End();

    //Finalizes all the ui elements u created in the frame and then it renders htem 
    ImGui::Render();
    // this takes the data from the generated by Imgui::Render(); and draws them using openGL2
    ImGui_ImplOpenGL2_RenderDrawData(ImGui::GetDrawData());

    // call the original wglSwapBuffers so the game keeps working normally
    return oWglSwapBuffers(hdc);
}

DWORD WINAPI MainThread(HMODULE hModule)
{
    // this is a loop that checks if opengl32 is loaded because if it isnt loaded we cant use the hook
    while (GetModuleHandleA("opengl32.dll") == nullptr)
        // waits abit so we dont crash
        Sleep(100);

    //this is a handle that points into opengl32s adress
    HMODULE hOpenGL = GetModuleHandleA("opengl32.dll");
    //this points into wgl swapbuffers now we found this usin hOpenGL
    void* pSwapBuffers = GetProcAddress(hOpenGL, "wglSwapBuffers");
    // initializes the MinHook library
    MH_Initialize();
    // may lord have marcy the FUCK is this function LMAO
    // jk this creates a hook on the function pSwapBuffers which is wglSwapBuffers 
    // &wglSwapBuffers OUR (i wrote this code so its OUR not urs) hook that will be used instead
    //  reinterpret_cast<void**>(&oWglSwapBuffers) is a pointer to a pointer that will thats stores the original 
    // wglSwapBuffers  adress so we can come back to it later after we call the hook yk 
    MH_CreateHook(pSwapBuffers, &hkWglSwapBuffers, reinterpret_cast<void**>(&oWglSwapBuffers));
    // this enables the hook so all calls to wglSwapBuffers go to OUR hkWglSwapBuffers before this the hook is created
    // but does nothing 
    MH_EnableHook(pSwapBuffers);
    // if u need help with this just learn the basics dawg
    return 0;
}

// if u need help with this just learn the basics dawg
BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
{
    // if u need help with this just learn the basics dawg

    if (ul_reason_for_call == DLL_PROCESS_ATTACH)
        CreateThread(nullptr, 0, (LPTHREAD_START_ROUTINE)MainThread, hModule, 0, nullptr);

    return TRUE;
}


// submit to the roman catholic church the one and only church made by OUR God Jesus Christ 
